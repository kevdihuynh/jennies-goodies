{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nfunction MultiFlavorsComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function MultiFlavorsComponent_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const flavor_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.toggleFlavor(flavor_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const flavor_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r0.isActiveFlavor(flavor_r2) && !ctx_r0.product.allowMultiple));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", flavor_r2, \" \");\n  }\n}\n\nfunction MultiFlavorsComponent_div_2_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function MultiFlavorsComponent_div_2_button_5_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const filling_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.toggleFilling(filling_r7));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const filling_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r6.isActiveFilling(filling_r7) && !ctx_r6.product.allowMultiple));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", filling_r7, \" \");\n  }\n}\n\nfunction MultiFlavorsComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 0);\n    i0.ɵɵtemplate(5, MultiFlavorsComponent_div_2_button_5_Template, 2, 4, \"button\", 1);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Choose \", ctx_r1.product.secondOptionHeading ? ctx_r1.product.secondOptionHeading : \"filling\", \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.product.multiFlavors[ctx_r1.currentSelectedFlavors[0]]);\n  }\n}\n\nexport let MultiFlavorsComponent = /*#__PURE__*/(() => {\n  class MultiFlavorsComponent {\n    constructor() {\n      this.modifySelectedFlavors = new EventEmitter();\n      this.inputEvents = new EventEmitter();\n      this.currentSelectedFlavors = [];\n      this.selectedFillings = [];\n      this._ = _;\n      this.selectedOptionIndex = 0;\n      this.objectKeys = Object.keys;\n    }\n\n    ngOnInit() {\n      this.selectedOption = _.get(this.product.variations, [this.selectedOptionIndex], undefined);\n      this.inputEvents.subscribe(e => {\n        if (e && e.data === 'clear') {\n          this.selectedFillings = [];\n          this.currentSelectedFlavors = [];\n        }\n      }); // const firstFlavor = _.get(this.objectKeys(this.product.multiFlavors), '[0]');\n      // const firstFilling = _.get(this.product.multiFlavors, `[${firstFlavor}]`).values().next().value;\n      // if (firstFlavor && firstFilling) {\n      //   this.currentSelectedFlavors.push(firstFlavor);\n      //   this.selectedFillings.push(firstFilling);\n      //   this.modifySelectedFlavors.emit(this.currentSelectedFlavors[0] + ' with ' + this.selectedFillings[0]);\n      // }\n    }\n\n    isActiveFlavor(flavor) {\n      return _.includes(this.currentSelectedFlavors, flavor);\n    }\n\n    toggleFlavor(flavor) {\n      this.selectedFillings = [];\n      this.modifySelectedFlavors.emit(undefined);\n\n      if (this.isActiveFlavor(flavor) && !this.product.allowMultiple) {\n        _.remove(this.currentSelectedFlavors, currentFlavor => _.isEqual(currentFlavor, flavor));\n\n        return;\n      }\n\n      if (this.isZeroRemainingFlavorsCount() && !this.product.allowMultiple) {\n        this.currentSelectedFlavors.shift();\n      }\n\n      if (this.product.allowMultiple && this.getRemainingSelectedCount() > 0 || !this.product.allowMultiple) {\n        this.currentSelectedFlavors.push(flavor); // const filling = _.get(this.product.multiFlavors, `[${flavor}]`).values().next().value;\n        // this.selectedFillings.push(filling);\n        // this.modifySelectedFlavors.emit(this.currentSelectedFlavors[0] + ' with ' + this.selectedFillings[0]);\n      }\n    }\n\n    isActiveFilling(filling) {\n      return _.includes(this.selectedFillings, filling);\n    }\n\n    toggleFilling(filling) {\n      if (this.isActiveFilling(filling) && !this.product.allowMultiple) {\n        _.remove(this.selectedFillings, currentFilling => _.isEqual(currentFilling, filling));\n\n        this.modifySelectedFlavors.emit(undefined);\n        return;\n      }\n\n      if (this.isZeroRemainingFlavorsCount() && !this.product.allowMultiple) {\n        this.selectedFillings.shift();\n        this.modifySelectedFlavors.emit(undefined);\n      }\n\n      if (!this.product.allowMultiple) {\n        this.selectedFillings.push(filling);\n\n        const currentSelectedFlavor = _.get(this.currentSelectedFlavors, '[0]', undefined);\n\n        const currentSelectedFilling = _.get(this.selectedFillings, '[0]', undefined);\n\n        const currentSelectedOption = `${currentSelectedFlavor} with ${currentSelectedFilling}`;\n        let chosenOption;\n        this.product.flavors.map(flavor => {\n          const flavorNoSpace = flavor.replace(/\\s/g, '').toLowerCase();\n          const currentSelectedOptionNoSpace = currentSelectedOption.replace(/\\s/g, '').toLowerCase();\n\n          if (flavorNoSpace === currentSelectedOptionNoSpace) {\n            chosenOption = flavor;\n          }\n        });\n        this.modifySelectedFlavors.emit(chosenOption);\n      }\n    }\n\n    isZeroRemainingFlavorsCount() {\n      return _.isEqual(this.getRemainingFlavorsCount(), 0);\n    }\n\n    getRemainingFlavorsCount() {\n      return _.get(this.selectedOption, 'maxFlavors', 0) - this.currentSelectedFlavors.length;\n    }\n\n    getRemainingSelectedCount() {\n      return _.get(this.selectedOption, 'batchSize', 0) - this.currentSelectedFlavors.length;\n    }\n\n  }\n\n  MultiFlavorsComponent.ɵfac = function MultiFlavorsComponent_Factory(t) {\n    return new (t || MultiFlavorsComponent)();\n  };\n\n  MultiFlavorsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MultiFlavorsComponent,\n    selectors: [[\"app-multi-flavors\"]],\n    inputs: {\n      product: \"product\",\n      inputEvents: \"inputEvents\"\n    },\n    outputs: {\n      modifySelectedFlavors: \"modifySelectedFlavors\"\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"d-flex\", \"flex-wrap\", \"align-items-center\", \"btn-group\"], [\"class\", \"btn btn-outline-custom-purple btn-md rounded-0\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"btn\", \"btn-outline-custom-purple\", \"btn-md\", \"rounded-0\", 3, \"ngClass\", \"click\"], [1, \"font-weight-bold\", \"mb-3\", \"mt-3\"]],\n    template: function MultiFlavorsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MultiFlavorsComponent_button_1_Template, 2, 4, \"button\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, MultiFlavorsComponent_div_2_Template, 6, 2, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.objectKeys(ctx.product.multiFlavors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentSelectedFlavors.length > 0);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf]\n  });\n  return MultiFlavorsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}