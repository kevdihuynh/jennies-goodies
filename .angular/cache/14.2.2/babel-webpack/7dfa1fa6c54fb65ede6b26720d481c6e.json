{"ast":null,"code":"import _asyncToGenerator from \"/Users/jamz/jennies-goodies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport * as _ from 'lodash';\nimport { GlobalConstants } from '../../../../utils/global-constants';\nlet PaypalComponent = class PaypalComponent {\n  constructor(toastr, spinner, cartService, activeModal, afs, datePipe, googleCalendarService) {\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.cartService = cartService;\n    this.activeModal = activeModal;\n    this.afs = afs;\n    this.datePipe = datePipe;\n    this.googleCalendarService = googleCalendarService;\n    this._ = _;\n    this.globalConstants = GlobalConstants;\n    this.environment = environment;\n  }\n\n  ngOnInit() {\n    this.cartService.orderForm.subscribe(orderForm => {\n      this.orderForm = orderForm;\n      this.payPalConfig = undefined;\n      setTimeout(() => {\n        this.initConfig();\n      }, 200);\n    });\n  }\n\n  initConfig() {\n    var _this = this;\n\n    const currency = 'USD';\n    let item_total = this.orderForm.grandTotal;\n\n    const getDescription = () => {\n      return `${_.get(this.orderForm, ['isDelivery']) ? 'Delivery' : 'Pickup'} at ${_.get(this.orderForm, ['address'])}  on ${this.datePipe.transform(this.orderForm.selectedDateTime.end.dateTime, 'fullDate')} between ${this.datePipe.transform(this.orderForm.selectedDateTime.start.dateTime, 'shortTime')} and ${this.datePipe.transform(this.orderForm.selectedDateTime.end.dateTime, 'shortTime')}`;\n    };\n\n    const getAmount = () => {\n      const amountObj = {\n        currency_code: _.toUpper(currency),\n        value: _.toString(item_total),\n        breakdown: {\n          item_total: {\n            currency_code: _.toUpper(currency),\n            value: _.toString(item_total)\n          }\n        }\n      };\n      return amountObj;\n    };\n\n    const getItems = () => {\n      const items = _.map(this.orderForm.orders, order => {\n        return {\n          name: this.cartService.displayFriendlyItemText(order),\n          quantity: order.quantity,\n          category: 'PHYSICAL_GOODS',\n          unit_amount: {\n            currency_code: _.toUpper(currency),\n            value: _.toString(this.cartService.getItemTotal(order.name, order.price, _.get(this.orderForm, ['discount'])))\n          }\n        };\n      }); // Add delivery fee to breakdown\n\n\n      if (this.orderForm.deliveryFee > 0) {\n        items.push({\n          name: `Delivery Fee`,\n          quantity: 1,\n          category: 'PHYSICAL_GOODS',\n          unit_amount: {\n            currency_code: _.toUpper(currency),\n            value: _.toString(this.orderForm.deliveryFee)\n          }\n        });\n      }\n\n      return items;\n    }; // added any since ngx-paypal doesnt have 'phone' interface\n\n\n    const getPayer = () => {\n      // {street_number: \"13515\", route: \"27th Avenue Northeast\", neighborhood: \"Olympic Hills\", political: \"United States\", locality: \"Seattle\", â€¦}\n      // administrative_area_level_1: \"WA\"\n      // administrative_area_level_2: \"King County\"\n      // country: \"US\"\n      // locality: \"Seattle\"\n      // neighborhood: \"Olympic Hills\"\n      // political: \"United States\"\n      // postal_code: \"98125\"\n      // postal_code_suffix: \"3424\"\n      // route: \"27th Avenue Northeast\"\n      // street_number: \"13515\"\n      const orderFormName = _.split(this.orderForm.name, ' ');\n\n      const payerObj = {\n        name: {\n          given_name: _.get(orderFormName, [0], ''),\n          surname: _.get(orderFormName, [1], '')\n        },\n        address: {\n          address_line_1: _.trim(`${_.get(this.orderForm, 'addressComponent.street_number', '')} ${_.get(this.orderForm, 'addressComponent.route', '')}`),\n          address_line_2: _.get(this.orderForm, '', ''),\n          admin_area_2: _.get(this.orderForm, 'addressComponent.locality', ''),\n          admin_area_1: _.get(this.orderForm, 'addressComponent.administrative_area_level_1', ''),\n          postal_code: _.get(this.orderForm, 'addressComponent.postal_code', ''),\n          country_code: _.get(this.orderForm, 'addressComponent.country', '')\n        },\n        email_address: this.orderForm.email,\n        phone: {\n          phone_type: \"MOBILE\",\n          phone_number: {\n            national_number: this.orderForm.phoneNumber\n          }\n        }\n      };\n\n      const getObjectsWithEmpty = obj => {\n        return _(obj).pickBy(_.isObject) // get only objects\n        .mapValues(getObjectsWithEmpty) // call only for values as objects\n        .assign(_.omitBy(obj, _.isObject)) // save back result that is not object\n        .omitBy(_.isEmpty) // remove null and undefined from object\n        .value(); // get value\n      };\n\n      return getObjectsWithEmpty(payerObj);\n    };\n\n    this.payPalConfig = {\n      currency: _.toUpper(currency),\n      clientId: this.environment.paypal.clientId,\n      createOrderOnClient: data => ({\n        intent: 'CAPTURE',\n        purchase_units: [{\n          amount: getAmount(),\n          items: getItems(),\n          description: getDescription()\n        }],\n        payer: getPayer(),\n        application_context: {\n          shipping_preference: 'NO_SHIPPING'\n        }\n      }),\n      advanced: {\n        commit: 'true'\n      },\n      style: {\n        label: 'paypal',\n        layout: 'vertical'\n      },\n      onApprove: (data, actions) => {\n        // This triggers when user's credit card gets approved\n        // const data = {\n        //     billingtoken: null,\n        //     facilitatorAccessToken: \"A21AAEm-E7FkbqKWadgERJdTRbIV8vplaFKcJfrjF3m9I13YbxQqGOOGfNNqIK4haJfqE03GcYngqm-Zhejv2_PQOf4mhM0Jg\",\n        //     orderID: \"0GU08901S4582814A\",\n        //     payerID: \"FBH3PT3KJBY5W\"\n        // }\n        this.toastr.info(`We are now waiting for the transaction to complete...`, `Your Payment Form Has Been Approved!`, {\n          positionClass: 'toast-top-left',\n          progressBar: true,\n          disableTimeOut: false,\n          timeOut: 5000\n        });\n      },\n      onClientAuthorization: function () {\n        var _ref = _asyncToGenerator(function* (data) {\n          // Spinner has to turn off early due to inconsistent forever spinning\n          _this.spinner.hide();\n\n          _this.toastr.info('You will receive an email confirmation soon. Thank you!', 'Payment Received!', {\n            positionClass: 'toast-top-left',\n            progressBar: true,\n            disableTimeOut: true\n          });\n\n          try {\n            // Make a copy of the orderForm before it gets cleared\n            const finalOrderForm = _.cloneDeep(_this.orderForm);\n\n            const transactionId = data.purchase_units[0].payments.captures[0].id;\n\n            _this.afs.collection('transactions').doc(transactionId).set({\n              paypal: data,\n              orderForm: finalOrderForm\n            });\n\n            yield _this.googleCalendarService.bookCalendar(finalOrderForm, transactionId);\n\n            _this.cartService.clearCart();\n\n            _this.activeModal.close('transaction-completed');\n\n            _this.toastr.success(`Check your email to add this to your calendar!`, `Google Invite Sent!`, {\n              positionClass: 'toast-top-left',\n              progressBar: true,\n              disableTimeOut: true\n            });\n          } catch (error) {\n            console.log(error);\n\n            _this.spinner.hide();\n\n            _this.toastr.error(`Please contact us for confirmation: ${_this.globalConstants.company.phoneNumber}`, `Calendar Invite Failed`, {\n              positionClass: 'toast-top-left',\n              progressBar: true,\n              disableTimeOut: true\n            });\n          }\n        });\n\n        return function onClientAuthorization(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      onCancel: (data, actions) => {\n        this.spinner.hide();\n        this.toastr.info('You have closed the Payment Form', 'Payment Form Cancelled', {\n          positionClass: 'toast-top-left',\n          progressBar: true,\n          disableTimeOut: false,\n          timeOut: 3000\n        });\n      },\n      onError: err => {\n        console.log(err);\n        this.spinner.hide();\n        this.toastr.error('An error has occured in the Payment Form', 'Payment Form Error', {\n          positionClass: 'toast-top-left',\n          progressBar: true,\n          disableTimeOut: false\n        });\n      },\n      onClick: function () {\n        var _ref2 = _asyncToGenerator(function* (data, actions) {\n          // console.log(this.orderForm);\n          _this.spinner.show(); // if (\n          //     data &&\n          //     data.fundingSource &&\n          //     data.fundingSource === 'card'\n          // ) {\n          //     // close the spinner since paypal widget not opens the card form\n          //     // in app instead of as new tab\n          //     setTimeout(() => {\n          //         this.spinner.hide();\n          //     }, 1000);\n          // }\n\n\n          _this.toastr.info('You have opened the Payment Form', 'Last Step To Complete Your Order!', {\n            positionClass: 'toast-top-left',\n            progressBar: true,\n            disableTimeOut: false,\n            timeOut: 3000\n          });\n        });\n\n        return function onClick(_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    };\n  }\n\n};\nPaypalComponent = __decorate([Component({\n  selector: 'app-paypal',\n  templateUrl: './paypal.component.html',\n  styleUrls: ['./paypal.component.scss']\n})], PaypalComponent);\nexport { PaypalComponent };","map":null,"metadata":{},"sourceType":"module"}