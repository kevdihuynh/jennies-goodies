{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core'; // import { AuthService } from '../../../services/firestore/auth/auth.service';\n\nimport { EditModalConfirmComponent } from '../edit-modal-confirm/edit-modal-confirm.component';\nimport * as _ from 'lodash'; // import Compressor from 'compressorjs';\n\nimport { DatePipe } from '@angular/common';\nlet EditModalContentComponent = class EditModalContentComponent {\n  constructor(modalService, activeModal, // public authService: AuthService,\n  spinner, toastrService, afs, afStorage, datePipe) {\n    this.modalService = modalService;\n    this.activeModal = activeModal;\n    this.spinner = spinner;\n    this.toastrService = toastrService;\n    this.afs = afs;\n    this.afStorage = afStorage;\n    this.datePipe = datePipe;\n    this.isNew = false;\n    this.posts = [];\n    this._ = _;\n    this.keys = [];\n    this.customQuillEditor = {};\n  }\n\n  ngOnInit() {\n    // this.authService.user$.subscribe(user => {\n    //   this.user = user\n    // this.keys = _.keys(this.data);\n    this.keys = _.orderBy(_.concat(_.get(this.inputsConfig, ['string']), _.get(this.inputsConfig, ['number']), _.get(this.inputsConfig, ['url']), _.get(this.inputsConfig, ['quill']), _.get(this.inputsConfig, ['date']), _.get(this.inputsConfig, ['boolean'])), [key => _.includes(_.get(this.inputsConfig, ['quill']), key)], ['asc']); // });\n  }\n\n  transformString(key, $event) {\n    switch (key) {\n      case 'slug':\n        return _.toLower(_.replace($event, new RegExp(/[^a-zA-Z0-9]/g), '-'));\n\n      case 'category':\n        return _.startCase($event);\n\n      default:\n        return $event;\n    }\n  }\n\n  isDisabled(key) {\n    // if (_.get(this.user, ['roles', 'admin']) && !_.isEqual(key, 'slug')) {\n    //   return false;\n    // }\n    return !this.isNew && _.includes(_.get(this.inputsConfig, ['disabled']), key);\n  }\n\n  isValidString(key) {\n    if (_.isEqual(key, 'slug')) {\n      const existingSlugs = _.map(this.posts, post => _.get(post, ['slug']));\n\n      return !_.includes(existingSlugs, this.data[key]) && !_.isEmpty(_.get(this.data, [key]));\n    }\n\n    return !_.isEmpty(_.get(this.data, [key]));\n  }\n\n  isValidUrl(key) {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n    '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n\n    return !!pattern.test(_.get(this.data, [key]));\n  }\n\n  isValid() {\n    return _.every(this.keys, key => {\n      if (_.includes(_.get(this.inputsConfig, ['string']), key)) {\n        return this.isValidString(key);\n      }\n\n      if (_.includes(_.get(this.inputsConfig, ['number']), key)) {\n        return _.isNumber(_.get(this.data, [key]));\n      }\n\n      if (_.includes(_.get(this.inputsConfig, ['url']), key)) {\n        return this.isValidUrl(key);\n      }\n\n      if (_.includes(_.get(this.inputsConfig, ['date']), key)) {\n        return _.isDate(_.get(this.data, [key]).toDate());\n      }\n\n      if (_.includes(_.get(this.inputsConfig, ['boolean']), key)) {\n        return true;\n      }\n\n      return !_.isEmpty(this.data[key]);\n    });\n  }\n\n  delete() {\n    // if (!this.authService.canEdit(this.user, _.get(this.data, ['uid']))) {\n    //   return;\n    // }\n    const modalOptions = {\n      backdrop: 'static',\n      keyboard: false\n    };\n    const modalRef = this.modalService.open(EditModalConfirmComponent, modalOptions);\n    modalRef.componentInstance.title = `Delete`;\n    modalRef.componentInstance.body = `Are you sure you want to delete?`;\n    modalRef.result.then(reason => {\n      if (_.isEqual(reason, 'delete')) {\n        this.activeModal.close({\n          reason: 'delete',\n          data: this.data\n        });\n      }\n    }, reason => {});\n  }\n\n  copyToClipboard(record) {\n    const content = JSON.stringify(record, null, 4);\n    document.addEventListener('copy', e => {\n      e.clipboardData.setData('text/plain', content);\n      e.preventDefault();\n      document.removeEventListener('copy', () => {});\n    });\n    document.execCommand('copy');\n    this.toastrService.info(`Copied. Paste where you want`);\n  }\n\n  getEditorInstance(editorInstance, key) {\n    this.quillKey = key;\n    this.quillEditorRef = editorInstance; // const toolbar = editorInstance.getModule('toolbar');\n    // toolbar.addHandler('image', this.imageHandler);\n  }\n\n};\n\n__decorate([Input()], EditModalContentComponent.prototype, \"collection\", void 0);\n\n__decorate([Input()], EditModalContentComponent.prototype, \"id\", void 0);\n\n__decorate([Input()], EditModalContentComponent.prototype, \"data\", void 0);\n\n__decorate([Input()], EditModalContentComponent.prototype, \"isNew\", void 0);\n\n__decorate([Input()], EditModalContentComponent.prototype, \"posts\", void 0);\n\n__decorate([Input()], EditModalContentComponent.prototype, \"inputsConfig\", void 0);\n\nEditModalContentComponent = __decorate([Component({\n  selector: 'app-edit-modal-content',\n  templateUrl: './edit-modal-content.component.html',\n  styleUrls: ['./edit-modal-content.component.scss'],\n  providers: [DatePipe]\n})], EditModalContentComponent);\nexport { EditModalContentComponent };","map":null,"metadata":{},"sourceType":"module"}