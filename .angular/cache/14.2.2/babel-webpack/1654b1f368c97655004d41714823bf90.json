{"ast":null,"code":"import _asyncToGenerator from \"/Users/jamz/jennies-goodies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getBaseUrl, getResponse } from 'src/app/utils/utility-functions';\nimport getEventsResponse from './../../db_mock/get_events_response.json';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/cart/cart.service\";\nimport * as i2 from \"@angular/fire/functions\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/common\";\nexport let GoogleCalendarService = /*#__PURE__*/(() => {\n  class GoogleCalendarService {\n    constructor(cartService, fns, http, datePipe) {\n      this.cartService = cartService;\n      this.fns = fns;\n      this.http = http;\n      this.datePipe = datePipe;\n    }\n\n    getEvents(timeMin, timeMax) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const reqBody = {\n          timeMin,\n          timeMax\n        };\n\n        const callback = () => _this.http.post(`${getBaseUrl()}/getCalendarEvents`, reqBody);\n\n        const calendarEventsResponse = yield getResponse(callback, getEventsResponse).toPromise(); //TODO still need to parse it...\n\n        return calendarEventsResponse;\n      })();\n    }\n\n    updateEvent(orderForm, descriptionHtml) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const reqBody = {\n          orderForm,\n          description: descriptionHtml\n        };\n\n        const callback = () => _this2.http.post(`${getBaseUrl()}/updateCalendarEvent`, reqBody);\n\n        const updateCalendarEventResponse = yield getResponse(callback, getEventsResponse).toPromise(); //TODO still need to parse it...\n\n        return updateCalendarEventResponse;\n      })();\n    }\n\n    bookCalendar(orderForm, transactionId = 'N/A') {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        // time sent to google needs to be in RFC 3339\n        const getDescription = () => {\n          return `${_.get(orderForm, ['isDelivery']) ? 'Delivery' : 'Pick up'} at ${_.get(orderForm, ['address'])}  on ${_this3.datePipe.transform(orderForm.selectedDateTime.end.dateTime, 'fullDate')} between ${_this3.datePipe.transform(orderForm.selectedDateTime.start.dateTime, 'shortTime')} and ${_this3.datePipe.transform(orderForm.selectedDateTime.end.dateTime, 'shortTime')}`;\n        };\n\n        const getOrderItems = () => {\n          let itemList = '';\n          orderForm.orders.map(order => {\n            itemList += `<li>${_this3.cartService.displayFriendlyItemText(order)}</li>`;\n          });\n          return itemList;\n        };\n\n        const discount = _.get(orderForm, ['discount']);\n\n        const descriptionHTML = `\n      <section>\n        <p><b>Transaction ID:</b> ${transactionId}</p>\n        <p><b>Name:</b> ${orderForm.name}</p>\n        <p><b>Email:</b> ${orderForm.email}</p>\n        <p><b>Phone:</b> ${orderForm.phoneNumber}</p>\n        ${!_.isNil(discount) ? `<p><b>Discount Code:</b> ${_.get(discount, ['code'])} (${_.get(discount, ['percent'], 0)}% OFF ${_.get(discount, ['type'])})</p>` : ''}\n        <p><b>Total:</b> $${orderForm.total} ${orderForm.deliveryFee > 0 ? `+ ${orderForm.deliveryFee} Delievery Fee` : ``}</p>\n        <p><b>Orders:</b></p>\n        <ul>${getOrderItems()}</ul>\n        ${!_.isEmpty(orderForm.notes) ? `<p><b>Notes:</b> ${orderForm.notes}</p>` : ``}\n        <p><b>Description:</b> ${getDescription()}</p>\n      </section>\n    `;\n        const events = yield _this3.updateEvent(orderForm, descriptionHTML);\n        console.log('google calendar updateEvents response:: ', events);\n      })();\n    }\n\n  }\n\n  GoogleCalendarService.ɵfac = function GoogleCalendarService_Factory(t) {\n    return new (t || GoogleCalendarService)(i0.ɵɵinject(i1.CartService), i0.ɵɵinject(i2.AngularFireFunctions), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.DatePipe));\n  };\n\n  GoogleCalendarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GoogleCalendarService,\n    factory: GoogleCalendarService.ɵfac,\n    providedIn: 'root'\n  });\n  return GoogleCalendarService;\n})();","map":null,"metadata":{},"sourceType":"module"}