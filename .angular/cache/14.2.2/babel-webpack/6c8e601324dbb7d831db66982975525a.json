{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport { GlobalConstants } from '../../utils/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nconst DEFAULT_ORDER_FORM = {\n  name: '',\n  email: '',\n  phoneNumber: '',\n  isDelivery: false,\n  address: GlobalConstants.company.address,\n  addressComponent: null,\n  notes: '',\n  date: {\n    year: moment().add(1, 'day').year(),\n    month: moment().add(1, 'day').month() + 1,\n    day: moment().add(1, 'day').date()\n  },\n  // time: { hour: 17, minute: 0, second: 0 }, // TODO: Remove ngb time picker references as we are no longer using it\n  orders: [],\n  totalOrdersQuantity: 0,\n  deliveryDistance: 0,\n  deliveryFee: 0,\n  total: 0,\n  grandTotal: 0,\n  selectedDateTime: null,\n  confirmedAddress: null,\n  discount: null\n};\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(firestore) {\n      this.firestore = firestore;\n      this.orderFormSubject = new BehaviorSubject(_.assign(DEFAULT_ORDER_FORM, // JSON.parse(localStorage.getItem(`order_form`))  /* CACHE */\n      {},\n      /* NO CACHE */\n      _.pick(DEFAULT_ORDER_FORM, ['date'])));\n      this.orderForm = this.orderFormSubject.asObservable();\n      firestore.collection('settings').doc('discounts').valueChanges().subscribe(discounts => {\n        const discountDict = {};\n\n        _.forEach(discounts, (value, key) => {\n          discountDict[key] = _.assign(value, {\n            code: key\n          });\n        });\n\n        this.discounts = discountDict;\n      });\n    }\n\n    isProductFoundForDiscount(orderName, discount = undefined) {\n      const isAllDiscount = _.isEqual(_.toUpper(_.get(discount, ['type'])), 'EVERYTHING');\n\n      return _.isEqual(_.toLower(orderName), _.toLower(_.get(discount, ['type']))) || isAllDiscount;\n    }\n\n    validateDiscount(inputDiscount) {\n      const discount = _.find(this.discounts, value => {\n        return _.isEqual(_.get(value, ['code']), _.toUpper(inputDiscount));\n      });\n\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      const updatedOrders = _.cloneDeep(currentOrderForm.orders);\n\n      this.updateOrderFormByFields({\n        discount,\n        total: this.getTotal(updatedOrders, discount),\n        grandTotal: this.getGrandTotal(updatedOrders, discount, currentOrderForm.deliveryFee)\n      });\n    }\n\n    getSavings() {\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      return _.round(this.getGrandTotal(currentOrderForm.orders) - currentOrderForm.grandTotal, 2);\n    }\n\n    getOrdersQuantity(orders) {\n      return _.reduce(orders, (sum, order) => {\n        return sum + order.quantity;\n      }, 0);\n    }\n\n    getItemTotal(orderName, orderPrice, discount = undefined) {\n      let price = orderPrice;\n\n      if (this.isProductFoundForDiscount(orderName, discount)) {\n        price -= price * (_.get(discount, ['percent'], 0) / 100);\n      }\n\n      return _.round(price, 2);\n    }\n\n    getItemsTotal(orderName, orderPrice, orderQuantity, discount = undefined) {\n      let total = orderPrice * orderQuantity;\n\n      if (this.isProductFoundForDiscount(orderName, discount)) {\n        total -= total * (_.get(discount, ['percent'], 0) / 100);\n      }\n\n      return _.round(total, 2);\n    }\n\n    getTotal(orders, discount = undefined) {\n      return _.round(_.reduce(orders, (sum, order) => {\n        return sum + this.getItemsTotal(_.get(order, ['name']), _.get(order, ['price'], 0), _.get(order, ['quantity'], 0), discount);\n      }, 0), 2);\n    }\n\n    getGrandTotal(orders, discount = undefined, deliveryFee = 0) {\n      return _.round(this.getTotal(orders, discount) + deliveryFee, 2);\n    }\n\n    updateOrderFormByFields(updatedFields) {\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      const updatedOrderForm = _.assign(currentOrderForm, updatedFields);\n\n      this.orderFormSubject.next(updatedOrderForm);\n      localStorage.setItem(`order_form`, JSON.stringify(updatedOrderForm));\n    }\n\n    addToCart(order) {\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      const currentOrders = _.cloneDeep(currentOrderForm.orders); // Logic to group all the similar orders into one if there is any\n\n\n      const exactOrdersExcludingQuantity = _.filter(_.cloneDeep(currentOrders), currentOrder => {\n        const omitFields = ['quantity'];\n        return _.isEqual(_.omit(currentOrder, ['quantity']), _.omit(order, ['quantity']));\n      });\n\n      const totalExactOrderQuantity = _.reduce(exactOrdersExcludingQuantity, (sum, order) => {\n        return sum + order.quantity;\n      }, order.quantity);\n\n      const newOrder = _.assign(_.cloneDeep(order), {\n        quantity: totalExactOrderQuantity\n      });\n\n      const nonExactOrdersExcludingQuantity = _.filter(_.cloneDeep(currentOrders), currentOrder => {\n        const omitFields = ['quantity'];\n        return !_.isEqual(_.omit(currentOrder, ['quantity']), _.omit(order, ['quantity']));\n      });\n\n      const updatedOrders = [...nonExactOrdersExcludingQuantity, newOrder];\n      this.updateOrderFormByFields({\n        orders: updatedOrders,\n        totalOrdersQuantity: this.getOrdersQuantity(updatedOrders),\n        total: this.getTotal(updatedOrders, _.get(currentOrderForm, ['discount'])),\n        grandTotal: this.getGrandTotal(updatedOrders, _.get(currentOrderForm, ['discount']), currentOrderForm.deliveryFee)\n      });\n    }\n\n    removeFromCart(index) {\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      const updatedOrders = _.cloneDeep(currentOrderForm.orders);\n\n      updatedOrders.splice(index, 1);\n      this.updateOrderFormByFields({\n        orders: updatedOrders,\n        totalOrdersQuantity: this.getOrdersQuantity(updatedOrders),\n        total: this.getTotal(updatedOrders, _.get(currentOrderForm, ['discount'])),\n        grandTotal: this.getGrandTotal(updatedOrders, _.get(currentOrderForm, ['discount']), currentOrderForm.deliveryFee)\n      });\n    }\n\n    updateFromCart(order, index) {\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      const updatedOrders = _.cloneDeep(currentOrderForm.orders);\n\n      updatedOrders.splice(index, 1, order);\n      this.updateOrderFormByFields({\n        orders: updatedOrders,\n        totalOrdersQuantity: this.getOrdersQuantity(updatedOrders),\n        total: this.getTotal(updatedOrders, _.get(currentOrderForm, ['discount'])),\n        grandTotal: this.getGrandTotal(updatedOrders, _.get(currentOrderForm, ['discount']), currentOrderForm.deliveryFee)\n      });\n    }\n\n    clearCart() {\n      this.updateOrderFormByFields({\n        orders: [],\n        totalOrdersQuantity: 0,\n        total: 0,\n        grandTotal: 0\n      });\n    }\n\n    displayFriendlyItemText(order) {\n      const selectedFlavors = _.get(order, ['selectedFlavors'], []);\n\n      const isSelectedFlavorsEmpty = _.isEmpty(selectedFlavors);\n\n      const totalPieces = order.batchSize * order.quantity;\n\n      const currentOrderForm = _.cloneDeep(this.orderFormSubject.getValue());\n\n      let text = `${_.isNil(_.get(order, ['quantity'])) ? 0 : _.get(order, ['quantity'], 0)} x ${_.get(order, ['name'], 'N/A')} (${_.get(order, ['batchSize'], 0)} for $${this.getItemTotal(_.get(order, ['name']), _.get(order, ['price'], 0), _.get(currentOrderForm, ['discount']))}) `;\n      text += `= ${totalPieces} Piece${totalPieces > 1 ? 's' : ''}`;\n\n      if (!isSelectedFlavorsEmpty) {\n        const selectedFlavorsDict = {};\n\n        _.forEach(selectedFlavors, selectedFlavor => {\n          _.set(selectedFlavorsDict, selectedFlavor, _.get(selectedFlavorsDict, [selectedFlavor], 0) + 1);\n        });\n\n        const selectedFlavorsFlatten = _.map(selectedFlavorsDict, (value, key) => {\n          const numPieces = order.allowMultiple ? value * order.quantity : totalPieces / selectedFlavors.length;\n          return `${numPieces} ${key}`;\n        });\n\n        const displaySelectedFlavors = _.join(selectedFlavorsFlatten, ', ');\n\n        text += ` (${displaySelectedFlavors})`;\n      }\n\n      return text;\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}